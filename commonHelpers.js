import{i as a,S as d,a as b}from"./assets/vendor-c493984e.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))l(e);new MutationObserver(e=>{for(const r of e)if(r.type==="childList")for(const c of r.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&l(c)}).observe(document,{childList:!0,subtree:!0});function s(e){const r={};return e.integrity&&(r.integrity=e.integrity),e.referrerPolicy&&(r.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?r.credentials="include":e.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function l(e){if(e.ep)return;e.ep=!0;const r=s(e);fetch(e.href,r)}})();const w=document.querySelector(".form"),m=document.querySelector(".gallery"),i=document.querySelector(".loader"),u=document.querySelector(".load-more");let y="",n=1,p=0;w.addEventListener("submit",async function(o){if(o.preventDefault(),y=o.target.querySelector("input").value.trim(),!y){a.error({position:"topRight",message:"Please complete the form"});return}n=1,p=0,m.innerHTML="",u.style.display="none",i.style.display="block";try{const t=await f(y,n);if(p=t.totalHits,p===0){a.error({position:"topRight",message:"Sorry, there are no images matching your search query. Please try again!"}),i.style.display="none";return}g(t.hits),i.style.display="none",new d(".gallery a").refresh(),p>n*40?u.style.display="block":a.info({position:"topRight",message:"We're sorry, but you've reached the end of search results."})}catch(t){a.error({position:"topRight",message:"Sorry, there are no images matching your search query. Please try again!"}),i.style.display="none",console.error(t)}});u.addEventListener("click",async function(){n++,i.style.display="block";try{const o=await f(y,n);g(o.hits),i.style.display="none",new d(".gallery a").refresh(),p<=n*40&&(u.style.display="none",a.info({position:"topRight",message:"We're sorry, but you've reached the end of search results."}));const{height:s}=document.querySelector(".gallery-item").getBoundingClientRect();window.scrollBy({top:s*2,behavior:"smooth"})}catch(o){a.error({position:"topRight",message:"Sorry, there are no images matching your search query. Please try again!"}),i.style.display="none",console.error(o)}});async function f(o,t){const e=`https://pixabay.com/api/?key=44961445-711bc8a23588390ccc23a177e&q=${o}&image_type=photo&orientation=horizontal&safesearch=true&page=${t}&per_page=20`;try{const r=await b.get(e);if(r.status!==200)throw new Error("Network response was not ok");return r.data}catch(r){throw console.error("Error fetching images:",r),r}}function g(o){const t=o.map(({webformatURL:s,largeImageURL:l,tags:e,likes:r,views:c,comments:h,downloads:v})=>`
      <li class="gallery-item">
        <a href="${l}">
          <img src="${s}" alt="${e}" loading="lazy"/>
        </a>
        <div class="image-info">
          <div class ="info-part"><p class="info-name">Likes</p><p class="info-num">${r}</p></div>
          <div class ="info-part"><p class="info-name">Views</p><p class="info-num">${c}</p></div>
          <div class ="info-part"><p class="info-name">Comments</p><p class="info-num">${h}</p></div>
          <div class ="info-part"><p class="info-name">Downloads</p><p class="info-num">${v}</p></div>
        </div>
      </li>
    `).join("");m.innerHTML+=t}
//# sourceMappingURL=commonHelpers.js.map
